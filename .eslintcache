[{"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\App.js":"1","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\reportWebVitals.js":"2","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\Top.js":"3","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\index.js":"4","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\alarmpanel\\AlarmPanel.js":"5","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\controlpanel\\ControlPanel.js":"6","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\cvboard\\CvBoard.js":"7","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\midiboard\\MidiBoard.js":"8","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\gpiboard\\GpiBoard.js":"9","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\gpoboard\\GpoBoard.js":"10","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\serialboard\\SerialBoard.js":"11","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\Updates.js":"12","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\Modals.js":"13"},{"size":832,"mtime":1608859491223,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1606278072237,"results":"16","hashOfConfig":"15"},{"size":4663,"mtime":1609646141752,"results":"17","hashOfConfig":"15"},{"size":639,"mtime":1608141777334,"results":"18","hashOfConfig":"15"},{"size":734,"mtime":1609650062936,"results":"19","hashOfConfig":"15"},{"size":740,"mtime":1608747280159,"results":"20","hashOfConfig":"15"},{"size":725,"mtime":1608747026273,"results":"21","hashOfConfig":"15"},{"size":731,"mtime":1608747204141,"results":"22","hashOfConfig":"15"},{"size":728,"mtime":1608747251458,"results":"23","hashOfConfig":"15"},{"size":728,"mtime":1608747237590,"results":"24","hashOfConfig":"15"},{"size":737,"mtime":1608747224230,"results":"25","hashOfConfig":"15"},{"size":4827,"mtime":1608908052571,"results":"26","hashOfConfig":"15"},{"size":2437,"mtime":1609647218349,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"17kdvzn",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\App.js",[],["57","58"],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\reportWebVitals.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\Top.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\index.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\alarmpanel\\AlarmPanel.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\controlpanel\\ControlPanel.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\cvboard\\CvBoard.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\midiboard\\MidiBoard.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\gpiboard\\GpiBoard.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\gpoboard\\GpoBoard.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\boards\\serialboard\\SerialBoard.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\Updates.js",["59"],"import React, { useEffect, useState } from 'react'\r\nconst { ipcRenderer } = window.require('electron')\r\n\r\nexport default function Updates() {\r\n    const [show, setShow] = useState(false)\r\n    const [popupContents, setPopupContents] = useState({\r\n        contents: []\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log('Top Of Updates')\r\n        ipcRenderer.on('checkingForUpdates', () => {\r\n            console.log('Checking for updates')\r\n        })\r\n\r\n        ipcRenderer.on('updateAvailable', () => {\r\n            console.log('Downloading update')\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    A new version is being downloaded\r\n                    <table style={{ width: '100%' }}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <progress style={{ width: '100%' }} max={100} value=\"0\" />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setShow(false)}>close</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n\r\n            setPopupContents(tempPopupContents)\r\n            setShow(true)\r\n        })\r\n\r\n        ipcRenderer.on('noUpdate', () => {\r\n            console.log('Up to date')\r\n        })\r\n\r\n        ipcRenderer.on('updateDownloaded', (e, releaseInfo) => {\r\n            console.log('Update Downloaded')\r\n            //console.log(releaseInfo)\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    <p>New update {\"v\" + releaseInfo.version} downloaded</p>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setPopupContents()}>Update on exit</button>\r\n                                </td>\r\n                                <td>\r\n                                    <button onClick={() => {\r\n                                        ipcRenderer.send('installUpdate')\r\n                                        setShow(false)\r\n                                    }}>Update and restart app now</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n\r\n            setPopupContents(tempPopupContents)\r\n            setShow(true)\r\n        })\r\n\r\n        ipcRenderer.on('updateError', (error) => {\r\n            console.log('Update Error', error,)\r\n        })\r\n\r\n        ipcRenderer.on('updateDownloadProgress', (e, progressPercent) => {\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    A new version is being downloaded\r\n                    <table style={{ width: '100%' }}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <progress style={{ width: '100%' }} max=\"100\" value={Math.round(progressPercent).toString()} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setShow(false)}>hide</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n            setPopupContents(tempPopupContents)\r\n        })\r\n\r\n        return () => {\r\n            ipcRenderer.removeAllListeners('checkingForUpdates')\r\n            ipcRenderer.removeAllListeners('updateAvailable')\r\n            ipcRenderer.removeAllListeners('noUpdate')\r\n            ipcRenderer.removeAllListeners('updateError')\r\n            ipcRenderer.removeAllListeners('updateDownloaded')\r\n            ipcRenderer.removeAllListeners('updateDownloadProgress')\r\n        }\r\n    }, [])\r\n\r\n    const makePopup = () => {\r\n        if (show === true) {\r\n            return (\r\n                <div style={{ position: 'fixed', bottom: '10px', right: '10px', backgroundColor: 'white', padding: '10px', boxShadow: '0px 0px 6px 2px', fontSize: '12px' }}>\r\n                    {popupContents.contents}\r\n                </div>\r\n            )\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        makePopup()\r\n    )\r\n}\r\n","C:\\Users\\wbmmu\\Desktop\\electron\\react\\pcb-assebmly-checker\\src\\components\\Modals.js",["60"],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport { Modal, Spinner } from 'react-bootstrap'\r\nconst { ipcRenderer } = window.require('electron')\r\n\r\nexport default function Modals() {\r\n    const defaultModalContents = { show: false }\r\n    const [modalContents, setModalContents] = useState(defaultModalContents)\r\n\r\n    useEffect(() => {\r\n        ipcRenderer.on('chipErasing', () => {\r\n\r\n            const tempContents = (\r\n                <Fragment>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Erasing Chip</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Spinner animation=\"border\" size=\"xl\" />\r\n                    </Modal.Body>\r\n                </Fragment>\r\n            )\r\n\r\n            setModalContents({\r\n                show: true,\r\n                contents: tempContents\r\n            })\r\n        })\r\n\r\n        ipcRenderer.on('programming', () => {\r\n\r\n            const tempContents = (\r\n                <Fragment>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Programming</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Spinner animation=\"border\" size=\"xl\" />\r\n                    </Modal.Body>\r\n                </Fragment>\r\n            )\r\n\r\n            setModalContents({\r\n                show: true,\r\n                contents: tempContents\r\n            })\r\n        })\r\n\r\n        ipcRenderer.on('chipEraseComplete', () => {\r\n            setModalContents(defaultModalContents)\r\n        })\r\n\r\n        ipcRenderer.on('programmingComplete', () => {\r\n            setModalContents(defaultModalContents)\r\n        })\r\n\r\n        return () => {\r\n            ipcRenderer.removeAllListeners('chipErasing')\r\n            ipcRenderer.removeAllListeners('chipEraseComplete')\r\n            ipcRenderer.removeAllListeners('programming')\r\n            ipcRenderer.removeAllListeners('programmingComplete')\r\n        }\r\n    }, [])\r\n\r\n    const handleClose = () => {\r\n        setModalContents(defaultModalContents)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                show={modalContents.show}\r\n                onHide={handleClose}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n            >\r\n                {modalContents.contents}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":112,"column":8,"nodeType":"67","endLine":112,"endColumn":10,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"69","line":62,"column":8,"nodeType":"67","endLine":62,"endColumn":10,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'popupContents'. Either include it or remove the dependency array.","ArrayExpression",["73"],"React Hook useEffect has a missing dependency: 'defaultModalContents'. Either include it or remove the dependency array.",["74"],"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [popupContents]",{"range":"79","text":"80"},"Update the dependencies array to be: [defaultModalContents]",{"range":"81","text":"82"},[4362,4364],"[popupContents]",[2036,2038],"[defaultModalContents]"]